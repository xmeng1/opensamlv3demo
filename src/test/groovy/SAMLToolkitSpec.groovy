import org.opensaml.saml.common.SAMLObject
import org.springframework.mock.web.MockHttpServletRequest
import spock.lang.Specification

import javax.servlet.http.HttpServletResponse


/**
 * User:    Xin Meng
 * Date:    07/05/17
 * Project: Default (Template) Project
 */
class SAMLToolkitSpec extends Specification {

    private MockHttpServletRequest httpRequest

    def setup(){
        httpRequest = new MockHttpServletRequest()
        httpRequest.setMethod("POST")
        httpRequest.setParameter("RelayState", "relay")
        httpRequest.setParameter("SAMLRequest", "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxzYW1scDpBdXRoblJlcXVlc3QNCiAgICB4bWxuczpzYW1scD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOnByb3RvY29sIg0KICAgIEFzc2VydGlvbkNvbnN1bWVyU2VydmljZVVSTD0iaHR0cHM6Ly9kZWVwbmV0LWRldi1lZC5teS5zYWxlc2ZvcmNlLmNvbT9zbz0wMEQwWTAwMDAwMWY3S2oiDQogICAgRGVzdGluYXRpb249Imh0dHBzOi8vZHVhbHNoaWVsZC1jbG91ZC5kZWVwbmV0c2VjdXJpdHkubG9jYWwvcmVzdC9zYW1sL3Nzby9hcHAvdHVsRDNWaGtzIg0KICAgIElEPSJfMkNBQUFBVnhwYlBBa01FOHdNRmt3TURBd01EQTBRemt6QUFBQXp0cmRtU0VONHRBTURieFQyVE11LWxSOE5yR1pUQ2VfU3BlMWZIMXFDRlZNOUFIamVVOGdQV0JqVi1Wc3haTDhhRk11UmhrclpCVGNiOEVKM3NZQk9vQkYwUGwwd3FlTFRvRVNzZUJBYTVxTE1jdVlxTS1JOXVPLUFFZG5FTTNIc2FVOXlobDE0R1NqTTExVTZENEx0RE9KU0pZTnItZ2dOUmpoTVUzUWhHeDBjNXJEbDhiY2JkOVJ0cF9xQ3p4SU9Sb2dBQVBkYXNPczdxbXV2Si1iSlhtZlVmMU9TY256V2RJS19SOEQ5ZEVnRVNnUmZ2X3psZ2xXdDRuYU8tZnk5dyINCiAgICBJc3N1ZUluc3RhbnQ9IjIwMTctMDUtMDVUMTU6NDA6MzIuNzg0WiINCiAgICBQcm90b2NvbEJpbmRpbmc9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpiaW5kaW5nczpIVFRQLVBPU1QiDQogICAgVmVyc2lvbj0iMi4wIj4NCiAgICA8c2FtbDpJc3N1ZXIgeG1sbnM6c2FtbD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFzc2VydGlvbiI+DQogICAgICBodHRwczovL3NhbWwuc2FsZXNmb3JjZS5jb20NCiAgICA8L3NhbWw6SXNzdWVyPg0KICAgIDxkczpTaWduYXR1cmUgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPg0KICAgICAgICA8ZHM6U2lnbmVkSW5mbz4NCiAgICAgICAgICAgIDxkczpDYW5vbmljYWxpemF0aW9uTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8+DQogICAgICAgICAgICA8ZHM6U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3JzYS1zaGExIi8+DQogICAgICAgICAgICA8ZHM6UmVmZXJlbmNlDQogICAgICAgICAgICAgICAgVVJJPSIjXzJDQUFBQVZ4cGJQQWtNRTh3TUZrd01EQXdNREEwUXprekFBQUF6dHJkbVNFTjR0QU1EYnhUMlRNdS1sUjhOckdaVENlX1NwZTFmSDFxQ0ZWTTlBSGplVThnUFdCalYtVnN4Wkw4YUZNdVJoa3JaQlRjYjhFSjNzWUJPb0JGMFBsMHdxZUxUb0VTc2VCQWE1cUxNY3VZcU0tSTl1Ty1BRWRuRU0zSHNhVTl5aGwxNEdTak0xMVU2RDRMdERPSlNKWU5yLWdnTlJqaE1VM1FoR3gwYzVyRGw4YmNiZDlSdHBfcUN6eElPUm9nQUFQZGFzT3M3cW11dkotYkpYbWZVZjFPU2NueldkSUtfUjhEOWRFZ0VTZ1Jmdl96bGdsV3Q0bmFPLWZ5OXciPg0KICAgICAgICAgICAgICAgIDxkczpUcmFuc2Zvcm1zPg0KICAgICAgICAgICAgICAgICAgICA8ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI2VudmVsb3BlZC1zaWduYXR1cmUiLz4NCiAgICAgICAgICAgICAgICAgICAgPGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyI+PGVjOkluY2x1c2l2ZU5hbWVzcGFjZXMgeG1sbnM6ZWM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIgUHJlZml4TGlzdD0iZHMgc2FtbCBzYW1scCIvPjwvZHM6VHJhbnNmb3JtPg0KICAgICAgICAgICAgICAgIDwvZHM6VHJhbnNmb3Jtcz4NCiAgICAgICAgICAgICAgICA8ZHM6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3NoYTEiLz4NCiAgICAgICAgICAgICAgICA8ZHM6RGlnZXN0VmFsdWU+czF1TzhCK296L21obFdINCtVLzBYQ2tOMTJzPTwvZHM6RGlnZXN0VmFsdWU+DQogICAgICAgICAgICA8L2RzOlJlZmVyZW5jZT4NCiAgICAgICAgPC9kczpTaWduZWRJbmZvPg0KICAgICAgICA8ZHM6U2lnbmF0dXJlVmFsdWU+DQogICAgICAgICAgICBEb0hiRE1La0gvVFpDWFp5bGdHWkJ3TWZUZFd0bmY4bE9LWGhWMG5WT3FFbk16dVZ1bjgvczZacWxkV3JkSWd1TzJ5YXFtWWpKMXNlIDdzS0w3dXBobHJkM1JPd2NpZTJCWE1TWjFDcVZjbmhxZ3dhKzBhT3pUdVRHNmVqQ3NMWnRNVGhpM0tGUkdyQ1AzY25iUThoRFYzazQgM1Fhd3F3SnZnb2tvQ0E2d2c5VCtFUHFqbU9lRm13SWFHU2RPaEMzamhCN2dOQW5NdnFNcjV2d3VFVHg4eXczL0s5WHhuYnVicWJSYw0KICAgICAgICAgICAgR0VhZGVtZ05nQ2h0NGVOOE9ZU0ZSN2l4UC9KdXdnVTk2ckNLYkVMQ3NocjF6YVErd0dCalBoVmhzVElRSmFEQkZmQlY4SHI2a0U3RiB4Q29jZlRCU2hwdEpvMzdvMXBKdVBRdjVPZEZjR3R1TTYyenhSdz09DQogICAgICAgIDwvZHM6U2lnbmF0dXJlVmFsdWU+DQogICAgICAgIDxkczpLZXlJbmZvPg0KICAgICAgICAgICAgPGRzOlg1MDlEYXRhPg0KICAgICAgICAgICAgICAgIDxkczpYNTA5Q2VydGlmaWNhdGU+TUlJRXJEQ0NBNVNnQXdJQkFnSU9BVnVMZDFGakFBQUFBQzRQN0trd0RRWUpLb1pJaHZjTkFRRUxCUUF3Z1pBeEtEQW1CZ05WQkFNTSBIMU5sYkdaVGFXZHVaV1JEWlhKMFh6SXdRWEJ5TWpBeE4xOHhNekExTURReEdEQVdCZ05WQkFzTUR6QXdSREJaTURBd01EQXhaamRMIGFqRVhNQlVHQTFVRUNnd09VMkZzWlhObWIzSmpaUzVqYjIweEZqQVVCZ05WQkFjTURWTmhiaUJHY21GdVkybHpZMjh4Q3pBSkJnTlYNCiAgICAgICAgICAgICAgICAgICAgQkFnTUFrTkJNUXd3Q2dZRFZRUUdFd05WVTBFd0hoY05NVGN3TkRJd01UTXdOVEEwV2hjTk1UZ3dOREl3TVRJd01EQXdXakNCa0RFbyBNQ1lHQTFVRUF3d2ZVMlZzWmxOcFoyNWxaRU5sY25SZk1qQkJjSEl5TURFM1h6RXpNRFV3TkRFWU1CWUdBMVVFQ3d3UE1EQkVNRmt3IE1EQXdNREZtTjB0cU1SY3dGUVlEVlFRS0RBNVRZV3hsYzJadmNtTmxMbU52YlRFV01CUUdBMVVFQnd3TlUyRnVJRVp5WVc1amFYTmoNCiAgICAgICAgICAgICAgICAgICAgYnpFTE1Ba0dBMVVFQ0F3Q1EwRXhEREFLQmdOVkJBWVRBMVZUUVRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQyBnZ0VCQUtnOCtuNGgyNXpuNzdlVDhNSncvNXc3UW1aRmhVTFlMUkJlZ0pqS2x1M2tHUGxOVHR1dC9CNElFQVdkUHVacnFPV0ZHNWt3IHY3NnVJNXgzNThZSmpteXdJODlEQ1dMWXJpVk9BV3dub0VDdENJRDF0OVdJNEVCQmZ0VzhaN3RQTGovSEtqNzZCMENTaXVDVGY4Yk0NCiAgICAgICAgICAgICAgICAgICAgaDJrc1NYWWhCVWlMRThjbFlxd2M2Tm03WFBsYTJRa0FJOEJ2TWFiRGpaS2JPanFaWUFrOFl6dENOVUEzTGJESmhCMDVCTE5DSEFpWiA3Qm0yK005cUtkYXZUQW8rd3VlbnZTdlJEV1c2dFdxRUdnV2ZhWTZlaERnazlzOHhFeXl4VldWT0loaDFhczVUNjNnQ25nU1ZrOHNhIGRqWHF0YTIxcElHa050WGN3UTBFUTFjUTFXT2NQQU16RWxaa1JWQm9JNDBDQXdFQUFhT0NBUUF3Z2Ywd0hRWURWUjBPQkJZRUZKMzgNCiAgICAgICAgICAgICAgICAgICAgd0QwKzQvWnNVVElCb0VydEM1YnNhS3BXTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3Z2NvR0ExVWRJd1NCd2pDQnY0QVVuZnpBUFQ3aiA5bXhSTWdHZ1N1MExsdXhvcWxhaGdaYWtnWk13Z1pBeEtEQW1CZ05WQkFNTUgxTmxiR1pUYVdkdVpXUkRaWEowWHpJd1FYQnlNakF4IE4xOHhNekExTURReEdEQVdCZ05WQkFzTUR6QXdSREJaTURBd01EQXhaamRMYWpFWE1CVUdBMVVFQ2d3T1UyRnNaWE5tYjNKalpTNWoNCiAgICAgICAgICAgICAgICAgICAgYjIweEZqQVVCZ05WQkFjTURWTmhiaUJHY21GdVkybHpZMjh4Q3pBSkJnTlZCQWdNQWtOQk1Rd3dDZ1lEVlFRR0V3TlZVMEdDRGdGYiBpM2RSWXdBQUFBQXVEK3lwTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFCdXpoR05sUDNEMDVOQzNRQS9nQ3VKUEovaDFYOVowTmdzIG5KdWErZm9XbFR4LzhBc2FWVDRzZGpJYkFHQ2dSL0JodnFJOUNQbFo4K09XajZwUi9mbVpUcjMrL3FGVVk2UnBYWG15ODBmWWJ3QncNCiAgICAgICAgICAgICAgICAgICAgWWl1NDFyeWJmMXEzV0JHZkMvK1NUdC9vcEZEQXZ0NEJEclU0c3VHQjZlaXZRb1lCN2ZyTGpWcGtTT2xrVDFKMmdQQWIwK0M1TEtoayBjcFBTaEpxVDkwb2VTanhLNk9sNExKbjZHaVYybHJVQUlzSCt3aGhzTmIrc25NWWFKTG50WEltekl6Tkp1eGRFWXR4SUxxc1FvRDhDIEN5NTdqZlp6ZHRMNDJJdTdsUml3SjRLNnZJUEV3a2l4OVNZZEpPZVRIZ21vWnVEN0lVOE5MWHB0UTNPY3M4UWV0T0ErK2R1Z1Y5ZmUgdHkxMDwvZHM6WDUwOUNlcnRpZmljYXRlPg0KICAgICAgICAgICAgPC9kczpYNTA5RGF0YT4NCiAgICAgICAgPC9kczpLZXlJbmZvPg0KICAgIDwvZHM6U2lnbmF0dXJlPg0KPC9zYW1scDpBdXRoblJlcXVlc3Q+")
    }

    def "SAML request convert" (){
        given: "SAML request base 64 format string"
        String samlRequestBase64Str = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbHA6QXV0aG5SZXF1ZXN0IHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6cHJvdG9jb2wiIEFzc2VydGlvbkNvbnN1bWVyU2VydmljZVVSTD0iaHR0cHM6Ly9kZWVwbmV0LWRldi1lZC5teS5zYWxlc2ZvcmNlLmNvbT9zbz0wMEQwWTAwMDAwMWY3S2oiIERlc3RpbmF0aW9uPSJodHRwczovL2RlZXBuZXQtZGV2Lm9uZWxvZ2luLmNvbS90cnVzdC9zYW1sMi9odHRwLXBvc3Qvc3NvLzYzMTQzMiIgSUQ9Il8yQ0FBQUFWeDFQZnZlTUU4d01Ga3dNREF3TURBMFF6a3pBQUFBemplTm1XSjRGckl4d3Z0RDdCYzdla1hJR25obFBoTkVvMmpvdkxPbmV2aExTOUdvVk50eTdkdFUtdmRJeHlYaWJJMXNFMnh1RFNmSW41bVlTODQ1b3pPY2lGaDFadi0wQU5teUxHZHZwOFZ0c2pkWWtuLWxSay01TlY0YXNjN3FlY0t6b3V5ME5RM29IM2FfdWEtZk05d04zSGNxN0QzVlZFbVNNZGctOWhPSVpvZWFQSmtETUQwQzVIbm1zZUkySjZZclpXNmlsb0pmc2FkUXU2eC1yN25sTkxzMUREdXNqUFo2RXN5aWRjUnM0TTYtcE5nNTRDc0FONnE3VDNiQzR3IiBJc3N1ZUluc3RhbnQ9IjIwMTctMDUtMDdUMjI6MzM6NDQuNDE4WiIgUHJvdG9jb2xCaW5kaW5nPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YmluZGluZ3M6SFRUUC1QT1NUIiBWZXJzaW9uPSIyLjAiPjxzYW1sOklzc3VlciB4bWxuczpzYW1sPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIj5odHRwczovL3NhbWwuc2FsZXNmb3JjZS5jb208L3NhbWw6SXNzdWVyPjxkczpTaWduYXR1cmUgeG1sbnM6ZHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyMiPgo8ZHM6U2lnbmVkSW5mbz4KPGRzOkNhbm9uaWNhbGl6YXRpb25NZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzEwL3htbC1leGMtYzE0biMiLz4KPGRzOlNpZ25hdHVyZU1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNyc2Etc2hhMSIvPgo8ZHM6UmVmZXJlbmNlIFVSST0iI18yQ0FBQUFWeDFQZnZlTUU4d01Ga3dNREF3TURBMFF6a3pBQUFBemplTm1XSjRGckl4d3Z0RDdCYzdla1hJR25obFBoTkVvMmpvdkxPbmV2aExTOUdvVk50eTdkdFUtdmRJeHlYaWJJMXNFMnh1RFNmSW41bVlTODQ1b3pPY2lGaDFadi0wQU5teUxHZHZwOFZ0c2pkWWtuLWxSay01TlY0YXNjN3FlY0t6b3V5ME5RM29IM2FfdWEtZk05d04zSGNxN0QzVlZFbVNNZGctOWhPSVpvZWFQSmtETUQwQzVIbm1zZUkySjZZclpXNmlsb0pmc2FkUXU2eC1yN25sTkxzMUREdXNqUFo2RXN5aWRjUnM0TTYtcE5nNTRDc0FONnE3VDNiQzR3Ij4KPGRzOlRyYW5zZm9ybXM+CjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25hdHVyZSIvPgo8ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIj48ZWM6SW5jbHVzaXZlTmFtZXNwYWNlcyB4bWxuczplYz0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIiBQcmVmaXhMaXN0PSJkcyBzYW1sIHNhbWxwIi8+PC9kczpUcmFuc2Zvcm0+CjwvZHM6VHJhbnNmb3Jtcz4KPGRzOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNzaGExIi8+CjxkczpEaWdlc3RWYWx1ZT5XdE5lUG9GRXVHdmFuS3VuT3RheXQrS0l4Rms9PC9kczpEaWdlc3RWYWx1ZT4KPC9kczpSZWZlcmVuY2U+CjwvZHM6U2lnbmVkSW5mbz4KPGRzOlNpZ25hdHVyZVZhbHVlPgprZGVyWW4waWJ5U2dBWHBIaXIzZW1kb04weG5ENDZDWDNVN00rcUkvdXVZUzdGUGdKTDdOR3FYQzEzeXp3U1V1OVhIa29oSEJZbnhHCmdTdFJHcVByTW02NUV3SDA1dkllYkNkbHJLVjNWS3dUSmZSUDdSSWxaMGY3cU15U1h3alpuQ2xrSUJISWQyNUl5d0xPVXZ5VkhSazcKUmtPWnFMZGdqOVNINU14MUpkaVozbGh4ZEdLcGREKzdnY2pnUUtIWEIxQytWb0Rmd2E0YkNyL1BUNDhoVjIyQmJBeTNHdDQ5Q3dqSQpJMHFXKzFYcDJWbjdJZWdQaUg0MlhNN3IvL3dJa0FDcUxTb1ZtMUlVbWZkYW5CbTFPRDJKVXlHVllPTTBpeWZObllxL1FHTXREZUE0CmxPZTNTQk91MXBheWpyWUIwMFN1QlRoNTJ1MzJFWEswSjIwQmhRPT0KPC9kczpTaWduYXR1cmVWYWx1ZT4KPGRzOktleUluZm8+PGRzOlg1MDlEYXRhPjxkczpYNTA5Q2VydGlmaWNhdGU+TUlJRXJEQ0NBNVNnQXdJQkFnSU9BVnVMZDFGakFBQUFBQzRQN0trd0RRWUpLb1pJaHZjTkFRRUxCUUF3Z1pBeEtEQW1CZ05WQkFNTQpIMU5sYkdaVGFXZHVaV1JEWlhKMFh6SXdRWEJ5TWpBeE4xOHhNekExTURReEdEQVdCZ05WQkFzTUR6QXdSREJaTURBd01EQXhaamRMCmFqRVhNQlVHQTFVRUNnd09VMkZzWlhObWIzSmpaUzVqYjIweEZqQVVCZ05WQkFjTURWTmhiaUJHY21GdVkybHpZMjh4Q3pBSkJnTlYKQkFnTUFrTkJNUXd3Q2dZRFZRUUdFd05WVTBFd0hoY05NVGN3TkRJd01UTXdOVEEwV2hjTk1UZ3dOREl3TVRJd01EQXdXakNCa0RFbwpNQ1lHQTFVRUF3d2ZVMlZzWmxOcFoyNWxaRU5sY25SZk1qQkJjSEl5TURFM1h6RXpNRFV3TkRFWU1CWUdBMVVFQ3d3UE1EQkVNRmt3Ck1EQXdNREZtTjB0cU1SY3dGUVlEVlFRS0RBNVRZV3hsYzJadmNtTmxMbU52YlRFV01CUUdBMVVFQnd3TlUyRnVJRVp5WVc1amFYTmoKYnpFTE1Ba0dBMVVFQ0F3Q1EwRXhEREFLQmdOVkJBWVRBMVZUUVRDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQwpnZ0VCQUtnOCtuNGgyNXpuNzdlVDhNSncvNXc3UW1aRmhVTFlMUkJlZ0pqS2x1M2tHUGxOVHR1dC9CNElFQVdkUHVacnFPV0ZHNWt3CnY3NnVJNXgzNThZSmpteXdJODlEQ1dMWXJpVk9BV3dub0VDdENJRDF0OVdJNEVCQmZ0VzhaN3RQTGovSEtqNzZCMENTaXVDVGY4Yk0KaDJrc1NYWWhCVWlMRThjbFlxd2M2Tm03WFBsYTJRa0FJOEJ2TWFiRGpaS2JPanFaWUFrOFl6dENOVUEzTGJESmhCMDVCTE5DSEFpWgo3Qm0yK005cUtkYXZUQW8rd3VlbnZTdlJEV1c2dFdxRUdnV2ZhWTZlaERnazlzOHhFeXl4VldWT0loaDFhczVUNjNnQ25nU1ZrOHNhCmRqWHF0YTIxcElHa050WGN3UTBFUTFjUTFXT2NQQU16RWxaa1JWQm9JNDBDQXdFQUFhT0NBUUF3Z2Ywd0hRWURWUjBPQkJZRUZKMzgKd0QwKzQvWnNVVElCb0VydEM1YnNhS3BXTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3Z2NvR0ExVWRJd1NCd2pDQnY0QVVuZnpBUFQ3ago5bXhSTWdHZ1N1MExsdXhvcWxhaGdaYWtnWk13Z1pBeEtEQW1CZ05WQkFNTUgxTmxiR1pUYVdkdVpXUkRaWEowWHpJd1FYQnlNakF4Ck4xOHhNekExTURReEdEQVdCZ05WQkFzTUR6QXdSREJaTURBd01EQXhaamRMYWpFWE1CVUdBMVVFQ2d3T1UyRnNaWE5tYjNKalpTNWoKYjIweEZqQVVCZ05WQkFjTURWTmhiaUJHY21GdVkybHpZMjh4Q3pBSkJnTlZCQWdNQWtOQk1Rd3dDZ1lEVlFRR0V3TlZVMEdDRGdGYgppM2RSWXdBQUFBQXVEK3lwTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFCdXpoR05sUDNEMDVOQzNRQS9nQ3VKUEovaDFYOVowTmdzCm5KdWErZm9XbFR4LzhBc2FWVDRzZGpJYkFHQ2dSL0JodnFJOUNQbFo4K09XajZwUi9mbVpUcjMrL3FGVVk2UnBYWG15ODBmWWJ3QncKWWl1NDFyeWJmMXEzV0JHZkMvK1NUdC9vcEZEQXZ0NEJEclU0c3VHQjZlaXZRb1lCN2ZyTGpWcGtTT2xrVDFKMmdQQWIwK0M1TEtoawpjcFBTaEpxVDkwb2VTanhLNk9sNExKbjZHaVYybHJVQUlzSCt3aGhzTmIrc25NWWFKTG50WEltekl6Tkp1eGRFWXR4SUxxc1FvRDhDCkN5NTdqZlp6ZHRMNDJJdTdsUml3SjRLNnZJUEV3a2l4OVNZZEpPZVRIZ21vWnVEN0lVOE5MWHB0UTNPY3M4UWV0T0ErK2R1Z1Y5ZmUKdHkxMDwvZHM6WDUwOUNlcnRpZmljYXRlPjwvZHM6WDUwOURhdGE+PC9kczpLZXlJbmZvPjwvZHM6U2lnbmF0dXJlPjwvc2FtbHA6QXV0aG5SZXF1ZXN0Pg=="

        when: "convert the base 64 saml request string to SAMLObject"
        SAMLObject samlObject = SAMLToolkit.convertBase64ToSaml(samlRequestBase64Str)

        then: "the should be right"
        println(samlObject.toString())
        println(samlObject.DOM.toString())
    }

    def "profile action test" (){
        given: "SAML request http servlet http request"
        when: "get the response"
        HttpServletResponse httpServletResponse = SAMLToolkit.getResponseBySamlRequest(httpRequest)
        then: "the response should be right"
        httpServletResponse!=null

        /*
        <?xml version="1.0" encoding="UTF-8"?>
<saml2p:Response Destination="MX-sp_sso_url" ID="_072bc7e628b20344a0c527b31d4c9403" InResponseTo="_2CAAAAVxpbPAkME8wMFkwMDAwMDA0QzkzAAAAztrdmSEN4tAMDbxT2TMu-lR8NrGZTCe_Spe1fH1qCFVM9AHjeU8gPWBjV-VsxZL8aFMuRhkrZBTcb8EJ3sYBOoBF0Pl0wqeLToESseBAa5qLMcuYqM-I9uO-AEdnEM3HsaU9yhl14GSjM11U6D4LtDOJSJYNr-ggNRjhMU3QhGx0c5rDl8bcbd9Rtp_qCzxIORogAAPdasOs7qmuvJ-bJXmfUf1OScnzWdIK_R8D9dEgESgRfv_zlglWt4naO-fy9w" IssueInstant="2017-05-29T20:31:30.263Z" Version="2.0" xmlns:saml2p="urn:oasis:names:tc:SAML:2.0:protocol"><saml2:Issuer xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion">MX-response-issuer</saml2:Issuer><saml2p:Status><saml2p:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/></saml2p:Status><saml2:Assertion ID="_096e364d7e736b1894a98161d5a2cb8d" IssueInstant="2017-05-29T20:31:30.263Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>MX_saml-issuer</saml2:Issuer><saml2:Subject><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer"><saml2:SubjectConfirmationData InResponseTo="_2CAAAAVxpbPAkME8wMFkwMDAwMDA0QzkzAAAAztrdmSEN4tAMDbxT2TMu-lR8NrGZTCe_Spe1fH1qCFVM9AHjeU8gPWBjV-VsxZL8aFMuRhkrZBTcb8EJ3sYBOoBF0Pl0wqeLToESseBAa5qLMcuYqM-I9uO-AEdnEM3HsaU9yhl14GSjM11U6D4LtDOJSJYNr-ggNRjhMU3QhGx0c5rDl8bcbd9Rtp_qCzxIORogAAPdasOs7qmuvJ-bJXmfUf1OScnzWdIK_R8D9dEgESgRfv_zlglWt4naO-fy9w" NotOnOrAfter="2017-05-29T20:36:33.099Z" Recipient="MX-sp_sso_url"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2017-05-29T20:31:30.263Z" NotOnOrAfter="2017-05-29T20:36:30.263Z"><saml2:AudienceRestriction><saml2:Audience>MX_authnRequest_issuer</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions></saml2:Assertion></saml2p:Response>
        * */
    }

}